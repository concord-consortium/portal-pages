#!/usr/bin/env node

var app = require('../app');
var http = require('http');
var open = require('opn');
var WebSocket = require('faye-websocket');
var argv = require('minimist')(process.argv.slice(2));

var port = normalizePort(process.env.PORT || argv.port || '10000');
app.set('port', port);
app.set('argv', argv);

var server = http.createServer(app);

app.set('clients', []);
server.addListener('upgrade', function(request, socket, head) {
  var ws = new WebSocket(request, socket, head);
  ws.onopen = function() {
    ws.send(JSON.stringify({action: 'connected'}));
  };
  ws.onclose = function() {
    app.set('clients', app.get('clients').filter(function (client) {
      return client !== ws;
    }));
  };
  app.get('clients').push(ws);
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  if (!argv.nobrowser) {
    open('http://localhost:' + port + '/');
  }
}
